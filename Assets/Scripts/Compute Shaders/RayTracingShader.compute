// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Sphere
{
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
};

struct Ray
{
	float3 energy;
	float3 origin;
	float3 direction;
};

struct RayHit
{
	float3 position;
	float distance;
	float3 normal;
	float3 specular;
	float3 albedo;
};

RWTexture2D<float4> Result;

// Transform matrices
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

// Light
float4 _DirectionalLight;

// Anti-aliasing
float2 _PixelOffset;

// Ray tracing
bool _UseRayTracing;
int _MaxBounces;

// Entities
StructuredBuffer<Sphere> _Spheres;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;

float3 CartesianToPolar(float3 cartesian)
{
	float3 polar;
	float theta = acos(cartesian.y) / -PI;
	float phi = atan2(cartesian.x, -cartesian.z) / -PI * 0.5f;

	polar.x = phi;
	polar.y = theta;

	return polar;
}

Ray CreateRay(float3 origin, float3 direction)
{
	Ray ray;
	ray.energy = float3(1.0f, 1.0f, 1.0f);
	ray.origin = origin;
	ray.direction = direction;
	return ray;
}

Ray CreateCameraRay(float2 uv)
{
	// Transform the camera origin to world space
	float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
	
	// Invert the perspective projection of the view-space position
	float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;

	// Transform the direction from camera to world space and normalize
	direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
	direction = normalize(direction);
	return CreateRay(origin, direction);
}

RayHit CreateRayHit()
{
	RayHit hit;
	hit.specular = float3(0.0f, 0.0f, 0.0f);
	hit.position = float3(0.0f, 0.0f, 0.0f);
	hit.distance = 1.#INF;
	hit.normal = float3(0.0f, 0.0f, 0.0f);
	hit.albedo = float3(0.0f, 0.0f, 0.0f);
	return hit;
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit, float3 specular, float3 albedo)
{
	// Calculate distance along the ray where the ground plane is intersected
	float t = -ray.origin.y / ray.direction.y;
	if (t > 0 && t < bestHit.distance)
	{
		bestHit.specular = specular;
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = float3(0.0f, 1.0f, 0.0f);
		bestHit.albedo = albedo;
	}
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
	// Calculate distance along the ray where the sphere is intersected
	float3 d = ray.origin - sphere.position;
	float p1 = -dot(ray.direction, d);
	float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
	if (p2sqr < 0)
	{
		return;
	}
	float p2 = sqrt(p2sqr);
	float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
	if (t > 0 && t < bestHit.distance)
	{
		bestHit.specular = sphere.specular;
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = normalize(bestHit.position - sphere.position);
		bestHit.albedo = sphere.albedo;
	}
}

RayHit Trace(Ray ray)
{
	RayHit bestHit = CreateRayHit();
	IntersectGroundPlane(ray, bestHit, float3(0.2f, 0.2f, 0.2f), float3(0.1f, 0.1f, 0.1f));

	uint numSpheres, stride;
	_Spheres.GetDimensions(numSpheres, stride);
	for (uint i = 0; i < numSpheres; i++)
	{
		IntersectSphere(ray, bestHit, _Spheres[i]);
	}

	return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
	if (hit.distance < 1.#INF)
	{
		if(_UseRayTracing){
			float3 albedo = float3(0.8f, 0.8f, 0.8f);

			// Reflect the ray and multiply energy with specular reflection
			ray.origin = hit.position + hit.normal * 0.001f;
			ray.direction = reflect(ray.direction, hit.normal);
			ray.energy *= hit.specular;

			// return float3(0.0f, 0.0f, 0.0f);
			// If the surface is in shadow, return nothing
			bool shadow = false;
			Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -1 * _DirectionalLight.xyz);
			RayHit shadowHit = Trace(shadowRay);
			if (shadowHit.distance != 1.#INF)
			{
					return float3(0.0f, 0.0f, 0.0f);
			}

			// Return the albedo of the hit
			return saturate(dot(hit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * hit.albedo;
		}
		else
		{
			// Return the normal
			return hit.normal * 0.5f + 0.5f;
		}
	}
	else
	{
		// Erase the ray's energy - the sky doesn't reflect anything
		ray.energy = 0.0f;

		// Sample the skybox and write it
		float2 uv = CartesianToPolar(ray.direction).xy;
		return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, uv, 0).xyz;
	}
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	// Get the dimensions of the RenderTexture
	uint width, height;
	Result.GetDimensions(width, height);

	// Transform pixel to [-1,1] range
	float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);

	// Get a ray for the UVs
	Ray ray = CreateCameraRay(uv);

	// Trace and shade
	float3 result = float3(0, 0, 0);
	if(_UseRayTracing)
	{
		for (int i = 0; i < _MaxBounces; i++)
		{
			RayHit hit = Trace(ray);
			result += ray.energy * Shade(ray, hit);
			if (!any(ray.energy))
			{
				break;
			}
		}
	}
	else
	{
		RayHit hit = Trace(ray);
		result = Shade(ray, hit);
	}

	Result[id.xy] = float4(result, 1);
}
