#include "UnityCG.cginc"
#include "Include/Tables.compute"

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel DistributeDensity
#pragma kernel GenerateMesh

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
static const int threads = 8;

struct Triangle {
	float3 a;
	float3 b;
	float3 c;
	float3 padding;
};

RWStructuredBuffer<float> _ChunkVertices;
AppendStructuredBuffer<Triangle> _ChunkTriangles;
AppendStructuredBuffer<float3> _ChunkVegetation;
Texture2D<float4> _NoiseMapVol1;
Texture2D<float4> _NoiseMapVol2;
Texture2D<float4> _NoiseMapVol3;
SamplerState TrilinearRepeat;

float3 _ChunkPosition;
uint _ChunkSize;
float _IsoLevel;
float _Scale;
float _Elevation;

// ====================== Constructors ====================== //

Triangle CreateTriangle(float3 a, float3 b, float3 c) {
	Triangle tri;
	tri.a = a;
	tri.b = b;
	tri.c = c;
	tri.padding = float3(0, 0, 0);
	return tri;
}

// ====================== Utils ====================== //

float3 GetCentroid(Triangle tri){
	return float3((tri.a + tri.b + tri.c) / 3);
}

/**
 * Gets the index of vertex ate (x, y, z)
 * in _ChunkVertices
*/
uint PositionToBufferIndex(uint3 id){
	return id.x + (id.y * _ChunkSize) + (id.z * _ChunkSize * _ChunkSize);
}

/**
 * Get the position of the vertex with
 * index "vertexId" on the voxel
 * with origin at (0, 0, 0)
*/
uint3 GetVertexOffset(uint vertexId){
	if(vertexId < 8) return offsetForVertex[vertexId];
	else return uint3(0, 0, 0);
}

/**
 * Get the id of the vertices that
 * make up the edge "edgeId" on the voxel
*/
uint2 GetVerticesForEdge(uint edgeId){
	if(edgeId < 12) return verticesForEdge[edgeId];
	else return uint2(0, 0);
}

/**
 * Inverse linear interpolation
*/
float InverseLerp(float a, float b, float v){
	return clamp((v - a) / (b - a), 0, 1);
}

/**
 * Linear interpolation of vectors
*/
float3 LerpPosition(float3 a, float3 b, float t){
	return ((1 - t) * a) + (b * t);
}

// ====================== Density ====================== //

/**
 * Returns the density value of
 * the vertex at (x, y, z) on the chunk
 * at position _ChunkPosition
*/
float CalculateDensity(uint3 id) 
{
	if(id.y >= _ChunkSize - 1) return _IsoLevel - 1;

	float3 chunkSpace = float3(id);
	float3 worldSpace = _ChunkPosition + (chunkSpace * _Scale);
	float density = -chunkSpace.y + 1.0;

	float3 warp = _NoiseMapVol2.SampleLevel(TrilinearRepeat, worldSpace.xz * 0.002, 0).xyz;
	warp += _NoiseMapVol2.SampleLevel(TrilinearRepeat, worldSpace.xy * 0.001, 0).xyz;
	warp += _NoiseMapVol2.SampleLevel(TrilinearRepeat, worldSpace.zy * 0.001, 0).xyz;
	float3 wrappedWorldSpace = worldSpace + (warp * 8.0);
	
	// Octaves
	density += _NoiseMapVol1.SampleLevel(TrilinearRepeat, wrappedWorldSpace.xz * .001, 0).r * 32.0;
	density += _NoiseMapVol1.SampleLevel(TrilinearRepeat, wrappedWorldSpace.xz * .005, 0).r * 12.0;
	density += _NoiseMapVol1.SampleLevel(TrilinearRepeat, wrappedWorldSpace.xz * .01, 0).r * 6.0;
	density += _NoiseMapVol1.SampleLevel(TrilinearRepeat, wrappedWorldSpace.xz * .05, 0).r * 1.0;
	density += _NoiseMapVol2.SampleLevel(TrilinearRepeat, wrappedWorldSpace.xz * .1, 0).r * 0.5;
	density += _NoiseMapVol2.SampleLevel(TrilinearRepeat, wrappedWorldSpace.xz * .5, 0).r * 0.1;

	float hardFloor = _Elevation;
	density += saturate((hardFloor - worldSpace.y) * 3.0) * _ChunkSize; 

	return density;
}

// ====================== Marching Cubes ====================== //

/**
 * Returns the index of voxel that corresponds
 * to the cube at "cubeOrigin" on the edge table
*/
int GetCubeIndex(uint3 cubeOrigin)
{
	int cubeIndex = 0;
	for (int i = 0; i < 8; i++)
	{
		uint3 vertex = cubeOrigin + GetVertexOffset(i);
		uint idx = PositionToBufferIndex(vertex);
		float density = _ChunkVertices[idx];
		if (density < _IsoLevel) cubeIndex |= (1 << i);
	}
	return cubeIndex;
}

/**
 * Linear interpolation vertices
*/
float3 Interpolate(float3 a, float3 b, float densityA, float densityB) {
	float3 t = InverseLerp(densityA, densityB, _IsoLevel);

	return LerpPosition(a, b, t);
}

/**
 * Generates the vertices for the of
 * the voxel "cubeIndex" at position "_ChunkPosition + id"
*/
void CalculateVoxelGeneratedVertices(uint3 id, int cubeIndex, inout float3 generatedVertices[12]){
	int voxelIndex = edgeTable[cubeIndex];

	for (int i = 0; i < 12; i++)
	{
		uint edgeCode = 1 << i;

		// If true, there is a vertex to be
		// generated on edge i
		if((voxelIndex & edgeCode) > 0) {
			uint2 edgeVertices = GetVerticesForEdge(i);
			uint3 a = id + GetVertexOffset(edgeVertices.x);
			uint3 b = id + GetVertexOffset(edgeVertices.y);

			float3 aWorldPos = a;
			float3 bWorldPos = b;

			float densityA = _ChunkVertices[PositionToBufferIndex(a)];
			float densityB = _ChunkVertices[PositionToBufferIndex(b)];
			generatedVertices[i] = Interpolate(aWorldPos, bWorldPos, densityA, densityB);
		}
	}
}

/**
 * Generates the triangles for the voxel
 * "cubeIndex" at position "_ChunkPosition + id"
*/
void GenerateVoxelTriangles(int cubeIndex, float3 generatedVertices[12]){
	int triangles[16] = triTable[cubeIndex];

	for(int i = 0; triangles[i] != -1; i += 3){
		Triangle tri = CreateTriangle(
			generatedVertices[triangles[i]],
			generatedVertices[triangles[i + 1]],
			generatedVertices[triangles[i + 2]]
		);
		_ChunkTriangles.Append(tri);

		float3 ctr = GetCentroid(tri);
		float vegetationValue = _NoiseMapVol3.SampleLevel(TrilinearRepeat, ctr.xz * .001, 0).r;
		if(vegetationValue > 0.75) {
			_ChunkVegetation.Append(ctr);
		}
	}
}

// ====================== Kernels ====================== //

[numthreads(threads, threads, threads)]
void DistributeDensity (uint3 id : SV_DispatchThreadID)
{
	if(id.x >= _ChunkSize || id.y >= _ChunkSize || id.z >= _ChunkSize){
		return;
	}

	uint idx = PositionToBufferIndex(id);
	_ChunkVertices[idx] = CalculateDensity(id);
}

[numthreads(threads, threads, threads)]
void GenerateMesh (uint3 id : SV_DispatchThreadID)
{
	uint cubesPerAxis = _ChunkSize - 1;
	if(id.x >= cubesPerAxis || id.y >= cubesPerAxis || id.z >= cubesPerAxis){
		return;
	}

	int cubeIndex = GetCubeIndex(id);
	if (cubeIndex == 0 || cubeIndex == 255) return;

	float3 generatedVertices[12];
	CalculateVoxelGeneratedVertices(id, cubeIndex, generatedVertices);
	GenerateVoxelTriangles(cubeIndex, generatedVertices);
}
